## %CopyrightBegin%
##
## SPDX-License-Identifier: Apache-2.0
##
## Copyright Ericsson AB 2025. All Rights Reserved.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## %CopyrightEnd%

name: Update vendored dependencies

on:
  pull_request:
    paths:
      - '**/vendor.info'

permissions:
  contents: write   # Required to push commits
  issues: write     # Required to create issues
  pull-requests: read

jobs:
  update-vendored-deps:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'Update dependency') && github.actor == 'renovate[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Find and process modified vendor.info files
        id: update-deps
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export ERL_TOP=$(pwd)

          # Find all vendor.info files modified in this PR
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep 'vendor\.info$' || true)
          
          if [ -z "$MODIFIED_FILES" ]; then
            echo "No vendor.info files were modified in this PR"
            exit 0
          fi
          
          SUCCESS=true
          FAILED_UPDATES=""
          
          # Process each modified vendor.info file
          for VENDOR_INFO in $MODIFIED_FILES; do
            echo "Processing $VENDOR_INFO"
            
            # Extract directory from vendor.info path
            VENDOR_DIR=$(dirname "$VENDOR_INFO")
            
            # Parse the vendor.info file
            sed 's@^/.*@@' "$VENDOR_INFO" | jq -c '.[]' | while read -r ENTRY; do
              ID=$(echo $ENTRY | jq -r '.ID')
              UPDATE_SCRIPT=$(echo $ENTRY | jq -r '.update')
              VERSION=$(echo $ENTRY | jq -r '.versionInfo')
              
              echo "Updating $ID to $VERSION using $UPDATE_SCRIPT"
              
              # Check if update script exists
              if [ -f "$UPDATE_SCRIPT" ]; then
                if bash "$UPDATE_SCRIPT"; then
                  echo "✅ Successfully updated $ID to $VERSION"
                  # Add changes to git
                  git add .
                else
                  echo "❌ Failed to update $ID to $VERSION"
                  SUCCESS=false
                  FAILED_UPDATES="$FAILED_UPDATES\n- $ID ($VERSION): $UPDATE_SCRIPT failed"
                fi
              else
                echo "❌ Update script not found: $UPDATE_SCRIPT"
                SUCCESS=false
                FAILED_UPDATES="$FAILED_UPDATES\n- $ID ($VERSION): Update script not found: $UPDATE_SCRIPT"
              fi
            done
          done
          
          if $SUCCESS && git diff --quiet ${{ github.event.pull_request.head.sha }}; then
            if git diff --quiet; then
                echo "No changes to commit"
            else
                git commit -m "Update vendored dependencies per vendor.info"
            fi
            git push
          fi