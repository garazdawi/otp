<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2018</year><year>2018</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>How to Implement an Alternative Service Discovery for Erlang Distribution
    </title>
    <prepared>Timmo Verlaan</prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date>2018-04-25</date>
    <rev>PA1</rev>
    <file>alt_disco.xml</file>
  </header>
  <p>
    This section describes how to implement an alternative discovery mechanism
    for Erlang distribution. Discovery is normally done using DNS and the
    Erlang Port Mapper Daemon (EPMD) for port discovery.
  </p>

  <note><p>
    Support for alternative service discovery mechanisms was added in Erlang/OTP
    21.
  </p></note>


  <section>
    <title>Introduction</title>
    <p>To implement your own service discovery module you have to write your own
    EPMD module. The <seealso marker="kernel:erl_epmd">EPMD module</seealso> is
    responsible for providing the location of another node. The distribution
    modules (<c>inet_tcp_dist</c>/<c>inet_sll_dist</c>) call the EPMD module to
    get the IP address and port of the other node. The EPMD module that is part
    of Erlang/OTP will resolve the hostname using DNS and uses the EPMD unix
    process to get the port of another node. The EPMD unix process does this by
    connecting to the other node on a well-known port, port 4369.</p>
  </section>

  <section>
    <title>Discovery module</title>
    <p>The discovery module needs to implement the same API as the regular
    <seealso marker="kernel:erl_epmd">EPMD module</seealso>. However, instead of
    communicating with EPMD you can connect to any service to find out
    connection details of other nodes. This works because in Erlang/OTP 21 a
    function call is added which is
    <seealso marker="kernel:erl_epmd#address_please-3"><c>address_please/3</c>
    </seealso>. This makes it possible to skip any DNS lookups for an Erlang
    node name. After this step the
    <seealso marker="kernel:erl_epmd#port_please-2"><c>port_please/2</c>
    </seealso> will be called to get the port number the other Erlang node is
    listening on.</p>
  </section>

  <section>
    <title>Optmization</title>
    <note><p>
      This doesn't necessarily work with all distribution modules.
    </p></note>

    <p>If you use one of the distribution modules that ship with Erlang
    (<c>inet_tcp_dist</c> and <c>inet_sll_dist</c>) you can avoid one function
    call. Logically the <c>address_please/3</c> function is called before the
    <c>port_please/2</c> function. This means that you can also do both actions
    (getting the IP address and getting the port number) in one single function
    call. You can do this by returning all the necessary data from
    <c>address_please/3</c>.</p>

    <p>
    <c>address_please/3</c> may return <c>{ok, Ip, TcpPort, Version}</c> instead of
    <c>{ok, Ip}</c>. The values are explained below, but for more details please
    check out the regular <seealso marker="kernel:erl_epmd">EPMD module</seealso>.
    </p>

    <taglist>
      <tag><c>Ip</c></tag>
      <item>
        <p>
    IP address of the remote node
        </p>
      </item>
      <tag><c>TcpPort</c></tag>
      <item>
        <p>
    Port of the remote node
        </p>
      </item>
      <tag><c>Version</c></tag>
      <item>
        <p>
    Version, which has been 5 since Erlang/OTP R6
        </p>
      </item>
    </taglist>

  </section>
</chapter>
